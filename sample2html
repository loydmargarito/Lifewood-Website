<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Global AI Animation</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #05050a; /* Dark background */
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>
    <script type="module">
        // Import necessary three.js modules from CDN
        import * as THREE from 'https://unpkg.com/three@0.148.0/build/three.module.js';
        import { OrbitControls } from 'https://unpkg.com/three@0.148.0/examples/jsm/controls/OrbitControls.js';
        import { EffectComposer } from 'https://unpkg.com/three@0.148.0/examples/jsm/postprocessing/EffectComposer.js';
        import { RenderPass } from 'https://unpkg.com/three@0.148.0/examples/jsm/postprocessing/RenderPass.js';
        import { UnrealBloomPass } from 'https://unpkg.com/three@0.148.0/examples/jsm/postprocessing/UnrealBloomPass.js';

        // 1. SCENE SETUP
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 5;

        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        document.body.appendChild(renderer.domElement);

        // Add OrbitControls for user interaction
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;
        controls.minDistance = 3;
        controls.maxDistance = 10;
        controls.autoRotate = false; // We'll handle rotation manually

        // 2. GLOBE CREATION
        const globeRadius = 2;
        const globeGeometry = new THREE.SphereGeometry(globeRadius, 64, 64);
        const globeMaterial = new THREE.PointsMaterial({
            color: 0x0088ff, // Bright blue
            size: 0.025,
            sizeAttenuation: true
        });
        const globe = new THREE.Points(globeGeometry, globeMaterial);
        scene.add(globe);

        // 3. "DATA COMETS" CREATION
        const cometsCount = 2000;
        const positions = new Float32Array(cometsCount * 3);
        const velocities = []; // To store velocity vectors

        const boundingBoxSize = 8; // The volume where comets travel

        for (let i = 0; i < cometsCount; i++) {
            // Initial random position within the bounding box
            positions[i * 3] = (Math.random() - 0.5) * boundingBoxSize;
            positions[i * 3 + 1] = (Math.random() - 0.5) * boundingBoxSize;
            positions[i * 3 + 2] = (Math.random() - 0.5) * boundingBoxSize;

            // Random velocity for each comet
            const velocity = new THREE.Vector3(
                (Math.random() - 0.5) * 0.02,
                (Math.random() - 0.5) * 0.02,
                (Math.random() - 0.5) * 0.02
            );
            velocities.push(velocity);
        }

        const cometsGeometry = new THREE.BufferGeometry();
        cometsGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        
        const cometsMaterial = new THREE.PointsMaterial({
            color: 0xffffff, // White for high contrast
            size: 0.015,
            sizeAttenuation: true,
            blending: THREE.AdditiveBlending, // Makes them glow brighter when overlapping
            transparent: true,
            opacity: 0.8
        });

        const comets = new THREE.Points(cometsGeometry, cometsMaterial);
        scene.add(comets);

        // 4. POST-PROCESSING (BLOOM EFFECT)
        const renderScene = new RenderPass(scene, camera);
        const bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);
        bloomPass.threshold = 0; // Lower threshold captures more light
        bloomPass.strength = 1.2; // How strong the glow is
        bloomPass.radius = 0.5; // How far the glow spreads

        const composer = new EffectComposer(renderer);
        composer.addPass(renderScene);
        composer.addPass(bloomPass);

        // 5. RESPONSIVENESS
        window.addEventListener('resize', () => {
            const width = window.innerWidth;
            const height = window.innerHeight;

            camera.aspect = width / height;
            camera.updateProjectionMatrix();

            renderer.setSize(width, height);
            composer.setSize(width, height);
        });

        // 6. ANIMATION LOOP
        function animate() {
            requestAnimationFrame(animate);

            // Rotate the main globe
            globe.rotation.y += 0.0005;

            // Animate the comets
            const positions = comets.geometry.attributes.position.array;
            for (let i = 0; i < cometsCount; i++) {
                positions[i * 3] += velocities[i].x;
                positions[i * 3 + 1] += velocities[i].y;
                positions[i * 3 + 2] += velocities[i].z;

                // If a comet goes out of bounds, reset its position
                if (Math.abs(positions[i * 3]) > boundingBoxSize / 2 || Math.abs(positions[i * 3 + 1]) > boundingBoxSize / 2 || Math.abs(positions[i * 3 + 2]) > boundingBoxSize / 2) {
                    positions[i * 3] = (Math.random() - 0.5) * boundingBoxSize;
                    positions[i * 3 + 1] = (Math.random() - 0.5) * boundingBoxSize;
                    positions[i * 3 + 2] = (Math.random() - 0.5) * boundingBoxSize;
                }
            }
            comets.geometry.attributes.position.needsUpdate = true; // IMPORTANT: tells three.js to update the geometry

            controls.update();

            // Use composer to render the scene with the bloom effect
            composer.render();
        }

        animate();

    </script>
</body>
</html>